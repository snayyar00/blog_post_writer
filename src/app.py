import streamlit as st
import os
import asyncio
from typing import Dict, Any, Optional

# Import the agent orchestrator for comprehensive blog generation
from src.agents.agent_orchestrator import generate_blog_post
from src.utils.openai_blog_writer import BlogPost

with st.sidebar:
    "## ‚úçÔ∏è Blog Post Generator"

    "### How to use"

    """
    1. Enter the number of web references you want to use. (Max 10).
    2. Enter your [OpenAI API key](https://platform.openai.com/api-keys) below.
    3. Enter the keyword you want to generate a blog post for.
    4. Click on the "Generate blog post" button.
    """
            
    web_references = st.number_input(
        label="Enter number of web references to use",
        max_value=10,
        min_value=1,
        value=3,
    )
    
    openai_api_key = st.text_input(
        label="OpenAI API Key",
        type="password"
        )
    
    os.environ['OPENAI_API_KEY'] = openai_api_key

    st.divider()

    """
    ### About

    ‚úçÔ∏è Blog Post Generator allows you to generate an SEO optimised blog post from keywords. 
    It uses multiple specialized agents to research, analyze, and create high-quality content.
    The system leverages competitor analysis, keyword research, and content quality checking
    to produce professional blog posts.

    This agent is a work in progress and you can contribute to it on [Github](https://github.com/jordan-jakisa/blog_post_writer) 
    with your feedback and suggestions.

    Made with ‚ù§Ô∏è from Uganda by [jordan-jakisa](https://github.com/jordan-jakisa)
    """

    st.divider()

    """
    ### FAQs

    #### How does it work?
    The Blog Post Generator uses multiple specialized agents that work together to create high-quality content:
    - Research Agent: Gathers information on your topic
    - Keyword Agent: Analyzes and generates relevant keywords
    - Competitor Analysis Agent: Studies top-performing content
    - Content Quality Agent: Ensures professional standards
    - Humanizer Agent: Makes content engaging and natural

    #### Is the information generated by the agent accurate?
    The agent generates information based on research and web references. It is recommended to verify the information generated.

    #### How many web references can I use?
    You can use a maximum of 10 web references.

    #### How do I get an OpenAI API key?
    You can get an OpenAI API key by signing up at [OpenAI](https://platform.openai.com/account/api-keys).

    #### How do I contribute to the project?
    You can contribute to the project on [Github](https://github.com/jordan-jakisa/blog_post_writer)

    """

    st.divider()

st.title(" ‚úçÔ∏è Blog Post Generator ")

if not openai_api_key:      
    st.info("Enter your OpenAI API key in the sidebar. You can get a key at https://platform.openai.com/account/api-keys.")

with st.form(key="generate_blog_post"):
    keyword = st.text_input(label="Enter a keyword", placeholder="")
    business_type = st.selectbox(
        "Select business type",
        options=["Technology", "E-commerce", "Healthcare", "Finance", "Education", "Marketing", "Other"],
        index=0
    )
    content_goal = st.selectbox(
        "Select content goal",
        options=["educate and inform readers", "generate leads", "build brand authority", "drive conversions"],
        index=0
    )
    submitted = st.form_submit_button("Generate blog post")
    
if submitted and not openai_api_key:
    st.info("Please enter your OpenAI API key", icon="‚ÑπÔ∏è")
        
elif submitted and not keyword:
    st.warning("Please enter a keyword", icon="‚ö†Ô∏è")
        
elif submitted:
    # Create a status container to show the process
    with st.status("Generating your blog post...", expanded=True) as status:
        try:
            # Step 1: Research and analyze
            status.update(label="üîç Researching and analyzing topic...")
            st.write(f"Researching topic: {keyword}")
            st.write(f"Business type: {business_type}")
            st.write(f"Content goal: {content_goal}")
            
            # Step 2: Generate the blog post using all agents
            status.update(label="‚ú® Generating blog post...")
            st.write("Orchestrating all agents to create comprehensive content...")
            
            # Run the async function in a synchronous context
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                post = loop.run_until_complete(generate_blog_post(
                    keyword=keyword,
                    business_type=business_type,
                    content_goal=content_goal,
                    web_references=web_references
                ))
            finally:
                loop.close()
            
            if not post:
                raise ValueError("Failed to generate blog post")
                
            # Step 3: Display the blog post
            status.update(label="‚úÖ Blog post generation complete!", state="complete")
            
            # Display metrics
            st.subheader("Content Metrics")
            col1, col2 = st.columns(2)
            with col1:
                st.write("**Business Impact**")
                for metric, value in post.metrics.business_impact.items():
                    st.write(f"- {metric.replace('_', ' ').title()}: {value:.1f}%")
            with col2:
                st.write("**Viral Potential**")
                for metric, value in post.metrics.viral_potential.items():
                    st.write(f"- {metric.replace('_', ' ').title()}: {value:.1f}%")
            
            # Display the blog post
            st.subheader("Generated Blog Post")
            st.write(post.content)
            st.snow()
            
        except Exception as e:
            status.update(label="‚ùå Error generating blog post", state="error")
            st.error(f"Error: {str(e)}")
            import traceback
            st.error(traceback.format_exc())  # Show detailed error for debugging

